name: Check LOST format in README

on:
  pull_request:
    paths:
      - 'README.md'

jobs:
  check-lost-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate LOST lines in README.md
        run: |
          echo "üîç Checking LOST lines in README.md..."

          # Extract all lines containing "LOST:" (case-insensitive)
          grep -i 'LOST:' README.md || true > lost_lines.txt

          # Define the correct format regex
          VALID_REGEX='^LOST:\s~?((\d{1,3}(,\d{3})+)|(\d+(\.\d+)?[KMB]?))\s[A-Za-z]{2,5}$'

          INVALID_FOUND=0

          while IFS= read -r line; do
            if echo "$line" | grep -Eq "$VALID_REGEX"; then
              echo "‚úÖ Valid: $line"
            else
              echo "‚ùå Invalid: $line"

              # Custom rule feedback
              if ! echo "$line" | grep -q -E '\s[A-Za-z]{2,5}$'; then
                echo "   ‚õî Missing or malformed currency code (should be like 'USD' or 'eth')"
              fi
              if ! echo "$line" | grep -q -E '\d{1,3}(,\d{3})+' && ! echo "$line" | grep -q -E '\d+(\.\d+)?[KMB]?'; then
                echo "   ‚õî Invalid number format (use comma separators or K/M/B suffixes)"
              fi
              if ! echo "$line" | grep -q -E '^\s*LOST:'; then
                echo "   ‚õî Line must start with 'LOST:'"
              fi

              INVALID_FOUND=1
            fi
          done < lost_lines.txt

          if [ "$INVALID_FOUND" -eq 1 ]; then
            echo ""
            echo "üö´ Some LOST lines are incorrectly formatted. Please follow the style guide:"
            echo "  ‚Ä¢ LOST: 1,000 USD"
            echo "  ‚Ä¢ LOST: ~2.5M ETH"
            echo "  ‚Ä¢ LOST: 8K eur"
            exit 1
          else
            echo "üéâ All LOST lines are valid."
          fi
